<%- include('header') %>

     <!-- Introducción Start -->
     <section class="background-blue">
      <div class="container">
         <div class="row">
            <div class="col-md-6">
                  <div class="titlepage">
                     <h2>¿Qué es ChestGAN?</h2>
                     <br>
                     <p style="width: 80%;"> El objetivo de este TFG es desarrollar una solución para la generación de datasets sintético de imágenes de tomografías computarizadas (TC) pulmonares. A tal fin, se propone inicialmente la implementación de modelos basados en arquitecturas de redes neuronales GAN (Generative Adversarial Network) que generen imágenes sintéticas de pulmones tanto sanos como con cáncer.  Además, se explorará la aplicabilidad de este enfoque a otros tipos de imágenes médicas, como rayos X, donde la disponibilidad de datos es limitada por cuestiones de privacidad.</p>
                  </div>
            </div>
         </div>
      </div>

      <hr>
      <div style="text-align: center; margin: 20px 0;">
         <img src="/images/iconoPulmones.png" alt="Icono pulmones" style="width: 50px; height: auto;">
      </div>
      <hr>

      <div class="container mt-4" style="display: flex; align-items: center; margin-bottom: 5%;">
         <img src="images/radiografiapulmones.png" alt="icono radiorgafía pulmones" style="width: 33%; height: auto; margin-right: 10%;">
         <div style="width: 66%;">
            <p>Actualmente, los modelos basados en arquitecturas de <strong>Deep Learning </strong>están siendo utilizados en el ámbito médico para la detección de enfermedades. Estos modelos requieren de una <strong>gran cantidad de datos</strong> para ser eficaces.</p>
            <br>
            <p>La escasez de datos para el entrenamiento de modelos de Deep Learning ha derivado en el estudio de técnicas para la <strong>generación de datos sintéticos </strong>usando arquitecturas basadas en GAN. Esta tipología de redes se presenta, por tanto, como una <strong>solución</strong> para enfrentar la falta de datos de calidad en el entrenamiento de algoritmos de inteligencia artificial.</p>
            <br>
            <p>Así, por ejemplo, la detección de cáncer de pulmón puede beneficiarse de la generación de imágenes sintéticas realistas de pulmones sanos y con cáncer, lo que permitirá crear grandes conjuntos de datos artificiales para mejorar la precisión de los algoritmos de detección. Además, esta técnica es extensible a otras modalidades de imágenes médicas, como los rayos X, donde los problemas de privacidad limitan la disponibilidad de datos clínicos.</p>
            <br>
            <p>Este trabajo es relevante porque aborda el desafío de la falta de datos médicos disponibles debido a <strong>cuestiones de privacidad</strong> y <strong>acceso limitado</strong>.</p>
         </div>
      </div>      
     </section>
     <!-- Introducción End -->

     <hr>
      <div style="text-align: center; margin: 20px 0;">
         <img src="/images/iconoPulmones.png" alt="Icono pulmones" style="width: 50px; height: auto;">
      </div>
      <hr>

           <!-- Tecnología Start -->
     <section id="service" class="service">
            <div class="container">
               <div class="row">
                     <div class="col-md-10 offset-md-1">
                        <div class="titlepage">
                           <h2>Tecnología</h2>
                           <p>
                              Este proyecto utiliza las últimas tecnologías para mejorar la generación de imágenes médicas sintéticas y su integración en aplicaciones clínicas. 
                              Implementamos un modelo GAN basado en PyTorch para generar imágenes realistas de pulmones sanos y con cáncer, utilizando arquitecturas avanzadas de Deep Learning. 
                              Para el pipeline de MLOps, utilizamos AWS con Metaflow para entrenar, desplegar y mejorar continuamente el modelo, asegurando una gestión eficiente de los datos y el flujo de trabajo de Machine Learning. 
                              La interfaz gráfica, desarrollada con Node.js, permite a médicos y expertos evaluar las imágenes generadas, proporcionando retroalimentación valiosa para su mejora.
                           </p>
                        </div>
                     </div>
               </div>
               <div class="row">
                  <div class="col-md-12">
                     <div class="service_main_tech">
                         <div class="service_box_tech blu_colo">
                             <i><img src="images/pytorchicon.png" alt="Imagen GAN" /></i>
                             <div>
                                 <h4>GAN - PyTorch</h4>
                                 <p>Las Generative Adversarial Networks (GAN) son una clase de modelos de Deep Learning que permiten la generación de datos sintéticos realistas. Utilizando PyTorch, una de las bibliotecas más populares para la construcción y entrenamiento de redes neuronales, las GANs se entrenan mediante un proceso adversarial en el que dos redes compiten entre sí para generar y evaluar imágenes, lo que lleva a una mejora progresiva en la calidad de los datos generados.</p>
                             </div>
                         </div>
                         <div class="service_box_tech green_colo">
                             <i><img src="images/metaflowicon.png" alt="Imagen MLOps"/></i>
                             <div>
                                 <h4>MLOps - Metaflow</h4>
                                 <p>El enfoque de MLOps (Machine Learning Operations) busca integrar y automatizar el ciclo de vida completo de los modelos de machine learning. Utilizando Minikube y Kubernetes junto con un servidor local, garantizamos una infraestructura flexible y controlada para entrenar, validar y poner en producción los modelos. Kubernetes proporciona herramientas para gestionar y orquestar los recursos de forma escalable y reproducible, mientras que el servidor local ofrece un entorno seguro y personalizado para el despliegue y ejecución de los modelos.</p>
                              </div>
                         </div>
                         <div class="service_box_tech orange_colo">
                             <i><img src="images/nodeicon.png" alt="Imagen Aplicación Web"/></i>
                             <div>
                                 <h4>Aplicación Web - Node.js</h4>
                                 <p>Node.js es un entorno de ejecución basado en JavaScript que permite desarrollar aplicaciones web rápidas y escalables. En este proyecto, se utiliza Node.js para crear una interfaz gráfica interactiva, que facilita la visualización de datos y la interacción con los modelos de machine learning. Gracias a su arquitectura asincrónica, Node.js maneja múltiples solicitudes simultáneamente de manera eficiente, lo que proporciona una experiencia de usuario fluida y ágil.</p>
                             </div>
                         </div>
                     </div>
                 </div>              
                 
               </div>
            </div>
         </div>
      </section>
  
     <!-- Tecnología Start-->

     <hr>
      <div style="text-align: center; margin: 0px 5%;">
         <img src="/images/iconoPulmones.png" alt="Icono pulmones" style="width: 50px; height: auto;">
      </div>
      <hr>

     <!-- Arquitectura Start -->
     <section id="service" class="service">
      <div class="titlepage">
         <h2>Arquitectura del proyecto</h2>
         <p style="margin-left: 20%; margin-right: 20%;">Este proyecto combina tres componentes clave: un modelo GAN para generar imágenes médicas sintéticas, un pipeline de MLOps para entrenar y mejorar continuamente el modelo, y una interfaz gráfica que permite a médicos y expertos evaluar la calidad de las imágenes generadas y proporcionar retroalimentación para su mejora.</p>
         <img src="images/arquitectura.png" alt="Arquitectura" style="padding: 3% 10%;">
      </div>
     </section>
     <!-- Arquitectura End -->

     <hr>
      <div style="text-align: center; margin: 0px 5%;">
         <img src="/images/iconoPulmones.png" alt="Icono pulmones" style="width: 50px; height: auto;">
      </div>
      <hr>

     <!-- Arquitectura Pipeline Start -->
      <section id="service" class="service">
      <div class="titlepage">
         <h2>Pipeline del proyecto</h2>
         <p style="margin-left: 20%; margin-right: 20%; text-align: justify;">
            En Metaflow, un pipeline o "flow" consta de varios "steps" (pasos), cada uno realizando una tarea específica y pasando datos al siguiente. Este pipeline tiene 7 pasos principales:
            <br><br>
            <strong>1. Start:</strong> Selección y preprocesamiento del dataset, transformando y filtrando imágenes para asegurar calidad y relevancia.
            <br>
            <strong>2. Train_model:</strong> Entrenamiento del modelo DCGAN con imágenes preprocesadas, configurando hiperparámetros y guardando resultados y modelos entrenados.
            <br>
            <strong>3. Eval_model:</strong> Evaluación del modelo con métricas personalizables para medir su rendimiento.
            <br>
            <strong>4. Generate_imgs:</strong> Generación de imágenes sintéticas si el modelo cumple un umbral de calidad, o ajuste y optimización de hiperparámetros en caso contrario.
            <br>
            <strong>5. Generate_report:</strong> Creación de un informe en PDF con métricas, gráficos y resultados relevantes del entrenamiento.
            <br>
            <strong>6. Upload_files_cloud:</strong> Subida segura de archivos a un almacenamiento en la nube con permisos restringidos.
            <br>
            <strong>7. End:</strong> Notificación al servidor web de la finalización del pipeline.
         </p>
         <img src="images/arqpipeline.png" alt="Arquitectura lógica del pipeline" style="padding: 3% 10%;">
      </div>
      </section>
      <!-- Arquitectura Pipeline end -->

      <hr>
      <div style="text-align: center; margin: 0px 5%;">
         <img src="/images/iconoPulmones.png" alt="Icono pulmones" style="width: 50px; height: auto;">
      </div>
      <hr>

      <!-- Resultados start -->
      <section id="model" class="service" style="background-color: white;">
         <div class="titlepage">
            <h2>Datos y evolución del modelo</h2>
            <p style="margin-left: 20%; margin-right: 20%; text-align: justify;">
               Los datos utilizados para entrenar el modelo provienen de TCIA (The Cancer Imaging Archive), una base de datos pública y de alta calidad con imágenes médicas de cáncer disponibles para investigación.
               <br><br>
               Se compararon tres arquitecturas diferentes: Vanilla GAN, WGAN y DCGAN. Debido a recursos computacionales limitados, se optó por la DCGAN, que ofrecía el mejor equilibrio entre rendimiento y eficiencia.
               <br><br>
               Sobre esta base, se trabajó en mejorar los hiperparámetros de la DCGAN para optimizar la calidad y realismo de las imágenes generadas.
               <br><br>
               Este proceso iterativo permitió que el modelo evolucionara y se adaptara mejor a los datos, obteniendo resultados cada vez más precisos y útiles para aplicaciones médicas e investigación.
            </p>
            <img src="images/resultadosModelo.png" alt="Resultados del modelo" style="width: 60%;padding: 3% 10%;">

            <p style="margin-left: 20%; margin-right: 20%; text-align: justify; margin-top: 2%;">
               Además de la evaluación visual, se analizaron métricas objetivas para cuantificar el rendimiento del modelo. Estas métricas incluyen medidas de similitud estructural, pérdida adversarial y estabilidad del entrenamiento.
               <br><br>
               La imagen siguiente recoge una comparativa clara de estas métricas entre la configuración inicial y la final:
            </p>
            <img src="images/EvalComparacion.png" alt="Evaluación cuantitativa del modelo" style="width: 60%; padding: 3% 10%;">
         </div>
      </section>
      <!-- Resultados end -->

      <hr>
      <div style="text-align: center; margin: 0px 5%;">
         <img src="/images/iconoPulmones.png" alt="Icono pulmones" style="width: 50px; height: auto;">
      </div>
      <hr>

      <!-- Comparación Hiperparámetros start -->
      <section id="hyperparams" class="service" style="background-color: white;">
         <div class="titlepage">
            <h2>Evolución del modelo: configuración inicial vs final</h2>
            <p style="margin-left: 20%; margin-right: 20%; text-align: justify;">
               Durante el desarrollo del modelo DCGAN, se llevaron a cabo múltiples pruebas para optimizar su rendimiento. Inicialmente, se utilizó una configuración base estándar, con parámetros por defecto.
               <br><br>
               Sin embargo, tras varias iteraciones, se ajustaron hiperparámetros clave como la tasa de aprendizaje, el tamaño del batch, vector latente, ... Estos cambios permitieron mejorar la calidad visual de las imágenes generadas, haciendo que se parecieran más a las imágenes reales de tomografías.
               <br><br>
               La siguiente imagen muestra una comparación directa entre los resultados obtenidos con la configuración inicial y la configuración final optimizada.
            </p>
            <img src="images/HiperparamComparacion.png" alt="Comparación de configuraciones del modelo" style="width: 60%; padding: 3% 10%;">
         </div>
      </section>
      <!-- Comparación Hiperparámetros end -->

      <hr>
      <div style="text-align: center; margin: 0px 5%;">
         <img src="/images/iconoPulmones.png" alt="Icono pulmones" style="width: 50px; height: auto;">
      </div>
      <hr>

      <!-- Radiografías GAN start -->
      <section id="xray" class="service" style="background-color: white;">
         <div class="titlepage">
            <h2>Generador de radiografías con neumonía</h2>
            <p style="margin-left: 20%; margin-right: 20%; text-align: justify;">
               Además del modelo basado en tomografías, se desarrolló una versión adaptada de la arquitectura DCGAN para generar imágenes sintéticas de radiografías de tórax con neumonía.
               <br><br>
               La neumonía es una afección pulmonar comúnmente diagnosticada mediante radiografías, donde los pulmones afectados muestran infiltrados pulmonares que aparecen como zonas blancas en la imagen.
               <br><br>
               El modelo fue entrenado con el conjunto de datos <em>"chest-xray-pneumonia"</em> (Mooney, 2018), utilizando únicamente imágenes de neumonía viral. El objetivo fue evaluar la viabilidad de aplicar GANs a otro tipo de imagen médica bidimensional. 
               <br><br>
               A continuación se muestra una animación del proceso de entrenamiento del modelo DCGAN aplicado a radiografías:
            </p>
            <img src="/images/XRAY-dcgan.gif" alt="Evolución del entrenamiento con radiografías" style="width: 60%; padding: 0% 10%;">
         </div>
      </section>
      <!-- Radiografías GAN end -->


<%- include('footer') %>

